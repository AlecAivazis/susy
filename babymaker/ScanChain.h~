#ifndef ScanChain_h
#define ScanChain_h

// C++ includes
#include <string>
#include <vector>

// ROOT includes
#include "TROOT.h"
#include "TFile.h"
#include "TChain.h"
#include "TTree.h"
#include "TH1F.h"

typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

class babyMaker {

 public:

  babyMaker() {};
  ~babyMaker() {
    delete BabyFile_;
    delete BabyTree_;
  };

  void ScanChain(TChain*, std::string = "testSample");

  void MakeBabyNtuple(const char *);
  void InitBabyNtuple();
  void FillBabyNtuple();
  void CloseBabyNtuple();

 private:

  TFile *BabyFile_;
  TTree *BabyTree_;

  //baby ntuple variables
  float met;

  std::vector<LorentzVector> jets_p4;

  std::vector<int> type;

  std::vector<LorentzVector> ll_p4;
  std::vector<LorentzVector> lt_p4;
  std::vector<LorentzVector> total_p4;

  std::vector<int> ll_id;
  std::vector<int> lt_id;
  std::vector<int> ll_charge;
  std::vector<int> lt_charge;
  std::vector<int> ll_index;
  std::vector<int> lt_index;

  float scale_1fb;
  std::vector<float> btag;

};

#endif

void babyMaker::MakeBabyNtuple(const char *BabyFilename){

  //
  TDirectory *rootdir = gDirectory->GetDirectory("Rint:");
  rootdir->cd();
  BabyFile_ = new TFile(Form("%s", BabyFilename), "RECREATE");
  BabyFile_->cd();
  BabyTree_ = new TTree("tree", "A Baby Ntuple");

  BabyTree_->Branch("met", &met );
  BabyTree_->Branch("jets_p4", &jets_p4 );
  BabyTree_->Branch("type", &type);

  BabyTree_->Branch("ll_p4", &ll_p4);
  BabyTree_->Branch("lt_p4", &lt_p4);
  BabyTree_->Branch("total_p4", &total_p4);

  BabyTree_->Branch("ll_id", &ll_id);
  BabyTree_->Branch("lt_id", &lt_id);
  BabyTree_->Branch("ll_charge" , &ll_charge);
  BabyTree_->Branch("lt_charge", &lt_charge);
  BabyTree_->Branch("ll_index", &ll_index);
  BabyTree_->Branch("lt_index", &lt_index);

  BabyTree_->Branch("scale_1fb", &scale_1fb);
  BabyTree_->Branch("btag", &btag);

  return;
}

void babyMaker::InitBabyNtuple () {

  met        = -999.0;
  // jets_p4    = new LorentzVector();

  //type = -1;
  //ll_p4 = new LorentzVector();
  //lt_p4 = new LorentzVector();

  //ll_id = -1;
  //lt_id = -1;
  //ll_charge = -999;
  //lt_charge = -999;
  //ll_index = -1;
  //lt_index = -1;

  scale_1fb = 1;
  return;
}

void babyMaker::FillBabyNtuple(){
  BabyTree_->Fill();
  return;
}

void babyMaker::CloseBabyNtuple(){
  BabyFile_->cd();
  BabyTree_->Write();
  BabyFile_->Close();
  return;
}
